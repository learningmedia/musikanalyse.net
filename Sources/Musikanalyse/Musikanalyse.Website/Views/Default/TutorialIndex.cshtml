@using MarkdownDeep
@using Musikanalyse.Services.Contracts
@using Musikanalyse.Website.ViewModels
@model TutorialsViewModel

@{
    ViewBag.Title = "Tutorials";
    Markdown markdown = new Markdown { ExtraMode = true, SafeMode = false, MarkdownInHtml = true };
}

<div class="page-header">
    <h1>Tutorials</h1>
</div>

<div class="container" style="-moz-column-width: 30em; -webkit-column-width: 30em; column-width: 30em; -moz-column-gap: 2.5em; -webkit-column-gap: 2.5em; column-gap: 2.5em;">
    <ul class="media-list">
        @foreach (TutorialInfo tutorial in this.Model.TutorialInfos.OrderBy(x => x.Title))
        {
            <li class="media" style="-webkit-column-break-inside: avoid; break-inside: avoid;">
                <a class="pull-left" href="@this.Url.Action("TutorialPage", new { urlKey = tutorial.UrlKey })">
                    <img class="media-object" src="@(tutorial.ThumbnailUrl ?? "/content/images/university-icon-96.png")">
                </a>
                <div class="media-body">
                    <h4 class="media-heading">@tutorial.Title</h4>
                    <p>@Html.Raw(markdown.Transform(tutorial.Abstract))</p>
                    <p><a class="btn btn-mini" href="@this.Url.Action("TutorialPage", new { urlKey = tutorial.UrlKey })">Zum Tutorial &raquo;</a></p>
                </div>
            </li>
        }
    </ul>
</div>
